#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  pkgbuild.install
#  Created: 2024/12/23 - 21:12
#  Altered: 2024/12/23 - 21:12
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

#Definindo variáveis de cores
export red="\033[01;31m"
export green="\033[01;32m"
export yellow="\033[01;33m"
export blue="\033[01;34m"
export pink="\033[01;35m"
export cyan="\033[01;36m"
export reset="\033[0m"

#system
declare APP="${0##*/}"

# Get the username of the user running the package installation
declare -g pkgname='chili-gnome-professional-theme'
declare -g user=$(logname)
declare -g user_home=$(getent passwd "$user" | cut -d: -f6)
declare -G DE='gnome'
declare -g quiet=true

# Directories
declare -g GTK3_DIR="$user_home/.config/gtk-3.0"
declare -g GTK4_DIR="$user_home/.config/gtk-4.0"
declare -g THEMES_DIR="/usr/share/themes"
declare -g BACKUP_DIR="$user_home/$pkgname.backup-settings"
declare -g backup_file="$BACKUP_DIR/$pkgname-settings-backup.txt"

: <<'EOF'
echo "user      - $user"
echo "user_home - $user_home"
echo "pkgname   - $pkgname"
EOF

MostraErro() {
  echo "erro: ${red}$1${reset} => comando: ${cyan}'$2'${reset} => result=${yellow}$3${reset}"
}
trap 'MostraErro "$APP[$FUNCNAME][$LINENO]" "$BASH_COMMAND" "$?"; exit 1' ERR

die() {
	local msg="$1"
	echo -e "==>${cyan}error: ${red}${msg}${reset}"
	exit 1
}
export -f die

msg_raw() {
	local msg="$1"
	#msg="$(sed 's/<[^>]*>//g' <<< "$msg")"	# Remove tags HTML, se existirem

	# Verifica se existe ':' na mensagem
	if [[ "$msg" == *:* ]]; then
		# Divide a string antes e depois do primeiro ':'
		local before_colon="${msg%%:*}:"
		local after_colon="${msg#*: }"
		# Aplica as cores
		msg="${cyan}${before_colon} ${red}${after_colon}${reset}"
	else
		# Se não houver ':', aplica apenas a cor padrão
		msg="${cyan}${msg}${reset}"
	fi
	echo -e "$msg"
}
export -f msg_raw

msg() {
	local msg="$1"
	if ! $quiet; then
		echo -e "==>${cyan}running: ${yellow}${msg}${reset}"
	fi
}
export -f msg

msg_ok() {
	local msg="$1"
	echo -e "==>${cyan}done   : ${green}${msg}${reset}"
}
export -f msg_ok

msg_run() {
	local msg="$1"
	if ! $quiet; then
		echo -e "==>${cyan}running: ${yellow}${msg}${reset}"
	fi
	eval "$msg"
}
export -f msg_run

msg_info() {
	local msg="$1"
	if ! $quiet; then
		echo -e "==>${yellow}info   : ${cyan}${msg}${reset}"
	fi
}
export -f msg_info

msg_warning() {
	local msg="$1"
	echo -e "==>${red}warning: ${orange}${msg}${reset}"
}
export -f msg_warning

replicate() {
	local char=${1:-'#'}
	local nsize=${2:-$(tput cols)}
	local line
	printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
}
export -f replicate

# Função wrapper para executar comandos como o usuário atual
run_as_user() {
	local command="$1"

	# Verifica se o comando foi fornecido
	if [ -z "$command" ]; then
		die "Erro: é necessário fornecer o comando a ser executado."
		return 1
	fi

	# Executa o comando como o usuário atual
	sudo -u "$user" bash -c "$command"
}
export -f run_as_user

################################################################################################

pre_install() {
	msg_info "Preparing to install Theme for ${DE^^}"
}

post_install() {
	if [[ -z "$user_home" ]]; then
		msg_warning "Could not determine the home directory for user '$user'. Skipping theme application."
		return 1
	fi

	# Backup function
	backup_directory() {
		local dir="$1"
		local backup_path="$BACKUP_DIR/$(basename "$dir")-$(date +%Y%m%d%H%M%S).tar.gz"

		msg "Syncing $dir to $BACKUP_DIR"
		run_as_user "rsync -Crazp $dir $BACKUP_DIR/.config/"
		#msg "Backing Up $dir to $BACKUP_DIR"
		#run_as_user "tar -czf $backup_path -C $(dirname "$dir") $(basename "$dir")"
	}
	msg_info "Preparing backup of current configuration"
	run_as_user "mkdir -p $BACKUP_DIR"
	backup_directory "$GTK3_DIR"
	backup_directory "$GTK4_DIR"

	msg "Backing up current settings to $backup_file..."
	run_as_user "
    {
      echo org.$DE.desktop.interface cursor-theme \$(gsettings get org.$DE.desktop.interface cursor-theme);
      echo org.$DE.desktop.interface icon-theme \$(gsettings get org.$DE.desktop.interface icon-theme);
      echo org.$DE.desktop.interface gtk-theme \$(gsettings get org.$DE.desktop.interface gtk-theme);
      echo org.$DE.desktop.background picture-uri \$(gsettings get org.$DE.desktop.background picture-uri);
      if [ \"$DE\" != \"cinnamon\" ]; then
        echo org.$DE.desktop.background picture-uri-dark \$(gsettings get org.$DE.desktop.background picture-uri-dark);
        echo org.$DE.shell.extensions.user-theme name \$(gsettings get org.$DE.shell.extensions.user-theme name);
      fi
    } > \"$backup_file\"
  "

	msg_info "Applying settings for user '$user'..."
	msg "Copying theme GTK files to $GTK3_DIR/"
	run_as_user "mkdir -p $GTK3_DIR"
	run_as_user "cp -Rpa $THEMES_DIR/gnome-professional-solid-40.1-dark/gtk-3.0/* $GTK3_DIR/"

	msg "Copying theme GTK files to $GTK4_DIR/"
	run_as_user "mkdir -p $GTK4_DIR"
	run_as_user "cp -Rpa $THEMES_DIR/gnome-professional-solid-40.1-dark/gtk-4.0/* $GTK4_DIR/"

	msg "Updating icon cache..."
	gtk-update-icon-cache -f /usr/share/icons/BeautyFolders 2>/dev/null
	gtk-update-icon-cache -f /usr/share/icons/BeautyLine 2>/dev/null
	sleep 2

	# Cria um comando adicional baseado na condição
	extra_commands=""
	if [ "$DE" != "cinnamon" ]; then
		extra_commands+="gsettings set org.$DE.desktop.background picture-uri-dark 'file:///usr/share/backgrounds/chililinux/animal-painting2.jpg'; "
		extra_commands+="gsettings set org.$DE.shell.extensions.user-theme name 'Tokyonight-Dark-Theme'; "
	fi

	msg_info "Applying new user theme settings"
	run_as_user "
    export DISPLAY=:0; \
    export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u $user)/bus; \
    gsettings set org.$DE.desktop.interface cursor-theme 'capitaine-cursors-light'; \
    gsettings set org.$DE.desktop.interface icon-theme 'BeautyFolders'; \
    gsettings set org.$DE.desktop.interface gtk-theme 'gnome-professional-solid-40.1-dark'; \
    gsettings set org.$DE.desktop.background picture-uri 'file:///usr/share/backgrounds/chililinux/animal-painting2.jpg'; \
    $extra_commands
  "

	if [ $? -eq 0 ]; then
		replicate '-'
		msg_ok "Theme applied successfully for user '$user'!"
		replicate '-'
	else
		replicate '-'
		msg_warning "Failed to apply Theme. Please run 'apply-gnome-theme' manually."
		replicate '-'
	fi
}

# Function executed before package removal
pre_remove() {
	msg_info "Preparing to remove Theme for ${DE^^}..."
}

# Function executed after package removal
post_remove() {
	msg_info "Restoring default settings and cleaning GTK configurations..."

	if [[ -z "$user_home" ]]; then
		die "Could not determine the home directory for user '$user'. Skipping theme removal."
		return 1
	fi

	if [[ -f "$backup_file" ]]; then
		msg "Restoring GNOME settings from $backup_file..."
		while IFS= read -r line; do
			schema=$(echo "$line" | awk '{print $1}')
			key=$(echo "$line" | awk '{print $2}')
			value=$(echo "$line" | cut -d' ' -f3-)

			run_as_user "
        export DISPLAY=:0; \
        export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u "$user")/bus; \
        gsettings set $schema $key $value
      "
		done <"$backup_file"
		#rm "$backup_file"
	else
		msg_warning "No settings backup file found. Skipping restoration."
	fi

	msg_info "Restoring GTK configurations..."
	run_as_user "rsync -Crazp $BACKUP_DIR/.config/gtk-3.0 $GTK3_DIR/"
	run_as_user "rsync -Crazp $BACKUP_DIR/.config/gtk-4.0 $GTK4_DIR/"
	msg_info "Default GNOME settings restored."
}

pre_upgrade() {
	pre_install
}

post_upgrade() {
	post_install
}
